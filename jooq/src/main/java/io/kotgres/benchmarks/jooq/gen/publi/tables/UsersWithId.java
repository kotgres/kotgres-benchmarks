/*
 * This file is generated by jOOQ.
 */
package io.kotgres.benchmarks.jooq.gen.publi.tables;


import io.kotgres.benchmarks.jooq.gen.publi.Keys;
import io.kotgres.benchmarks.jooq.gen.publi.Public;
import io.kotgres.benchmarks.jooq.gen.publi.tables.records.UsersWithIdRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersWithId extends TableImpl<UsersWithIdRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users_with_id</code>
     */
    public static final UsersWithId USERS_WITH_ID = new UsersWithId();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersWithIdRecord> getRecordType() {
        return UsersWithIdRecord.class;
    }

    /**
     * The column <code>public.users_with_id.id</code>.
     */
    public final TableField<UsersWithIdRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.users_with_id.name</code>.
     */
    public final TableField<UsersWithIdRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users_with_id.age</code>.
     */
    public final TableField<UsersWithIdRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.users_with_id.date_created</code>.
     */
    public final TableField<UsersWithIdRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6), this, "");

    private UsersWithId(Name alias, Table<UsersWithIdRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersWithId(Name alias, Table<UsersWithIdRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.users_with_id</code> table reference
     */
    public UsersWithId(String alias) {
        this(DSL.name(alias), USERS_WITH_ID);
    }

    /**
     * Create an aliased <code>public.users_with_id</code> table reference
     */
    public UsersWithId(Name alias) {
        this(alias, USERS_WITH_ID);
    }

    /**
     * Create a <code>public.users_with_id</code> table reference
     */
    public UsersWithId() {
        this(DSL.name("users_with_id"), null);
    }

    public <O extends Record> UsersWithId(Table<O> child, ForeignKey<O, UsersWithIdRecord> key) {
        super(child, key, USERS_WITH_ID);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UsersWithIdRecord, Integer> getIdentity() {
        return (Identity<UsersWithIdRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersWithIdRecord> getPrimaryKey() {
        return Keys.USERS_WITH_ID_PKEY;
    }

    @Override
    public UsersWithId as(String alias) {
        return new UsersWithId(DSL.name(alias), this);
    }

    @Override
    public UsersWithId as(Name alias) {
        return new UsersWithId(alias, this);
    }

    @Override
    public UsersWithId as(Table<?> alias) {
        return new UsersWithId(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersWithId rename(String name) {
        return new UsersWithId(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersWithId rename(Name name) {
        return new UsersWithId(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersWithId rename(Table<?> name) {
        return new UsersWithId(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
